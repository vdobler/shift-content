Shifting CMS Content with Go

1 Apr 2015

Volker Dobler
Senior Application Architect, Unic AG
volker.dobler@unic.com

* The Mission

Migrate the content from the existing Web Content Management System to the new WCMS

.image mission.png

Content is highly structured.

This structure needs massive transformation.


* Why Go?


* Go was not obvious

.image xlst.png

First reaction: *XLST*

But nobody commited to

- write,

- debug or

- maintain

these XLST transformations...



* The Solution

.image solution2.png

Gophers interpreting our own Domain Specific Language

.code dsl-example.txt ,/level3/

*Free*giveaway*: Never ever omit a lexer when writing a parser :-)


* Why Go?

Personal preference

Other factors:

- fast

- easy to operate

- easy to develop

In-house alternatives:
- Java
- C#
- PHP
- (Python, Ruby)


* Did it work out?


* Fast

Yes!

- Export and transformation is several factors faster than the import into the new system.

- Concurrent load on source system is easy to control.

- Current solution is probably IO-bound.


* Easy to operate

Yes! (But you knew this already) 

- Build a static linked binary in seconds

- Run that static linked binary


Most complicated tasks during releases: Update User Manual (pdf)


* Easy to develop

Yes!

- Less than 9000 lines of code, 12 kloc incl. comments and blank lines. (Application does more than just applying the DSL to XML data.

- Only stdlib libraries used (plus former exp/norm).

- Correct. No changes since May 21. 2014.

- Easy to pick up...


* Easy to pick up

- After long breaks:

    $ git log --pretty="format:%h %ad %s" --date=relative
    13fd924 1 year, 1 month ago Fix 'try' mode in the presence of UpdateMedialibRef modifiers.
    5d318d6 1 year, 1 month ago Fix some documentation on mapping rules.
    93ae340 1 year, 5 months ago Merge branch 'master' of github.com:vdobler/migration
    fd2befb 1 year, 5 months ago Remove equality-check on input files during release.

- For other developers




* Easy to test

* No upfront design

Startes with simple implementation:

.code source.go /orig start/,/orig end/

simple but hard to test


* Introduce 4 interfaces

.code source.go /final start/,/final end/

simple search/replace refactoring


* Add tests




* Anything bad?

Surprisingly little

First commit on Dec 9. 2011, that's 3 month *before* Go 1.0.