Shifting CMS Content with Go

1 Apr 2015

Volker Dobler
Senior Application Architect, Unic AG
volker.dobler@unic.com

* The Mission

Migrate the content from the existing Web Content Management System to the new WCMS

.image mission.png

Content is highly structured.

This structure needs *massive*transformation*.


* The next 17 minutes

- How we did it

- Why we chose Go

- Go did work very well

- Testable Go code

- Discussion


* How we did it


* Go was not obvious

.image xlst.png

First reaction: *XLST*

But nobody commited to

- write,

- debug or

- maintain

these XLST transformations...



* The Solution

.image solution2.png

Gophers interpreting our own Domain Specific Language

.code dsl-example.txt ,/level3/

*Free*giveaway*: Never ever omit a lexer when writing a parser :-)


* Go

* Why Go?

Personal preference

Other factors:

- fast

- easy to operate

- easy to develop

In-house alternatives:
- C#
- (Python, Ruby)
- Java
- PHP


* Did it work out?


* Fast

Yes!

- Export and transformation is several factors faster than the import into the new system.

- Concurrent load on source system is easy to control.

- Current solution is probably IO-bound.


* Easy to operate

Yes! (But you knew this already) 

- Build a static linked binary in seconds

- Run that static linked binary


Most complicated tasks during releases: Update the user manual (pdf)


* Easy to develop

Yes!

- Less than 9000 lines of code, 12 kloc incl. comments and blank lines. (Application does more than just applying the DSL to XML data.)

- Only stdlib libraries used (plus former exp/norm).

- Correct. No changes since May 21. 2014.

- Easy to pick up...


* Easy to pick up

- After long breaks:

    $ git log --pretty="format:%h %ad %s" --date=relative
    13fd924 1 year, 1 month ago Fix 'try' mode in the presence of UpdateMedialibRef modifiers.
    5d318d6 1 year, 1 month ago Fix some documentation on mapping rules.
    93ae340 1 year, 5 months ago Merge branch 'master' of github.com:vdobler/migration
    fd2befb 1 year, 5 months ago Remove equality-check on input files during release.

- For other developers

 

* Easy to test

- Testable design emerged naturally.

- No need for upfront work to make code testable.

- No complex DI infrastructure to get testdata or mocks into test.


* First implementation

    // SourceInfo contains information to access the source system
    type SourceInfo struct {
        Host         string  // host and port
        User, Passwd string  // basic auth
        Sitemap      string  // path to sitemap API
    }

    func FetchSitemap(source SourceInfo, root string) ([]SitemapEntry, error)

    // NewJob fetches the sitemap from s and builds a Job
    NewJob(s SourceInfo, root string) (Job, error) // uses FetchSitemap


Simple and straight forward but hard to test.


* Introduce interfaces

Very simple search/replace refactoring:


    type SourceInfo struct {  // unchanged
        Host         string
        User, Passwd string
        Sitemap      string
    }

    type SitemapFetcher interface {
        FetchSitemap(root string) ([]SitemapEntry, error)
    }

    // make original FetchSitemap a method; so SourceInfo becomes a SitemapFetcher
    func (s SourceInfo) FetchSitemap(root string) ([]SitemapEntry, error)

    // use the new interface
    NewJob(smf SitemapFetcher, root string) (Job, error)




* Add tests

    // mockSource simulates selected responses from the source system
    type mockSource struct {
        sitemaps []SitemapEntry
        pages    []Pages
    }

    // implement FetchSitemap
    func (ms mockSource) FetchSitemap(rootHandle string) ([]SitemapEntry, error) {

    func TestJob(t *testing.T) {
        ms := MockSource{ ... }
        job, err := NewJob(ms, "/content/de/brand")
    }

Done.



* The rest


* Anything bad?

Surprisingly little

First commit on Dec 9. 2011, that's 3 month *before* Go 1.0.